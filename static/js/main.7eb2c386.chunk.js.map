{"version":3,"sources":["img/spinner.gif","img/covid-virus.png","Component/SearchBar/SearchBar.js","Component/ReportContentDiv/ContentDiv.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","searchBar","state","cont","spin","CountryHandler","d","props","options","Countries","find","el","Country","setState","src","spinner","className","setTimeout","selectCountry","handleSelectCountry","e","target","value","option","optionsLoad","this","map","i","key","Date","slice","onChange","onClick","Component","contentDiv","img","style","fontSize","marginBottom","globalReport","Global","NewConfirmed","TotalConfirmed","TotalDeaths","byCountryData","App","covid19Data","byCoutries","testing","country","Axios","then","response","data","width","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7eb2c386.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.1c348a92.gif\";","module.exports = __webpack_public_path__ + \"static/media/covid-virus.ed4e6f68.png\";","import React, { Component } from 'react'\nimport '../SearchBar/SearchBar.css'\nimport spinner from '../../img/spinner.gif'\n\nclass searchBar extends Component{\n\n  state={\n    cont:'',\n    spin:''\n  }\n  CountryHandler=()=>{\n    let d=this.props.options.Countries.find(el=>{\n      \n      return el.Country===this.state.cont\n    })\n     this.setState({spin:<img src={spinner} className='spinner'></img>})\n    \n    setTimeout(()=>{\n      this.setState({spin:''})\n      this.props.selectCountry(d)\n    },3000)\n  }\n\n  handleSelectCountry=(e)=>{\n    this.setState({cont:e.target.value})\n     \n  }\n  render(){\n    \n    const optionsLoad=this.props.options\n    let option\n    option=optionsLoad.Countries ? optionsLoad.Countries.map((el,i)=>{\n      return <option key={i}>{el.Country}</option>\n    }):null\n    \n      return (\n      <>\n        <span className='date'>{optionsLoad.Date?optionsLoad.Date.slice(0,10):''}</span>\n         <select className=\"select\" onChange={this.handleSelectCountry}> \n             <option>--Select--</option>\n             {option}\n           </select>\n           <button onClick={this.CountryHandler} className=\"sub\" >Search</button><br></br>\n           {this.state.spin}\n     </>\n      )\n  }\n}\n\nexport default searchBar","import React from 'react'\nimport '../ReportContentDiv/ContentDiv.css'\nimport img from '../../img/covid-virus.png'\n\nfunction contentDiv(props){\n\n    return(\n        <div className='row'>\n            <h1>Global Report</h1>\n            <div className='col-12'>\n                <div className='col-4 newCase'>\n                    <img src={img} className='img'></img>\n                    <h2>New Cases</h2>\n                    <div style={{fontSize:'2rem',marginBottom:'0.8rem'}}>\n                        { props.globalReport.Global ? props.globalReport.Global.NewConfirmed : ''} \n                    </div>\n                </div>\n\n                <div className='col-4 totalCase'>\n                    <img src={img} className='img'></img>\n                    <h2>Total Cases</h2>\n                    <div style={{fontSize:'2rem',marginBottom:'0.8rem'}}>\n                    { props.globalReport.Global ? props.globalReport.Global.TotalConfirmed : ''} \n                    </div>\n                </div>\n\n                <div className='col-4 totalDeath'>\n                    <img src={img} className='img'></img>\n                    <h2>Total Death</h2>\n                    <div style={{fontSize:'2rem',marginBottom:'0.8rem'}}>\n                    { props.globalReport.Global ? props.globalReport.Global.TotalDeaths : ''}\n                    </div>\n                </div>\n\n            </div>\n\n          <h1> Country Report  { props.byCountryData ? props.byCountryData.Country :''}</h1>\n            <div className='col-12'>\n                <div className='col-4 CountryCase'>\n                    <img src={img} className='img'></img>\n                    <h2>New Cases</h2>\n                    <div style={{fontSize:'2rem',marginBottom:'0.8rem'}}>\n                        { props.byCountryData ? props.byCountryData.NewConfirmed : ''}\n                        </div>\n                </div>\n\n                <div className='col-4 CountrytotalCase'>\n                    <img src={img} className='img'></img>\n                    <h2>Total Cases</h2>\n                    <div style={{fontSize:'2rem',marginBottom:'0.8rem'}}>\n                    { props.byCountryData ? props.byCountryData.TotalConfirmed : ''}\n                    </div>\n                </div>\n\n                <div className='col-4 CountrytotalDeath'>\n                    <img src={img} className='img'></img>\n                    <h2>Total Death</h2>\n                    <div style={{fontSize:'2rem',marginBottom:'0.8rem'}}>\n                    { props.byCountryData ? props.byCountryData.TotalDeaths : ''}\n                    </div>\n                </div>\n\n            </div>\n        </div>\n        \n    )\n\n}\n\nexport default contentDiv","import React, { Component } from 'react';\nimport SearchBar from './Component/SearchBar/SearchBar'\nimport ContentDiv from './Component/ReportContentDiv/ContentDiv'\nimport Axios from 'axios'\n\n\nexport default class App extends Component{\n\n  state={\n     covid19Data:{},\n     byCoutries:{},\n     testing:\"\"\n  }\n\n  componentDidMount(){\n    Axios('https://api.covid19api.com/summary')\n    .then(response=>{\n      this.setState({covid19Data:response.data})\n    })\n\n  }\n\n  selectCountry=(country)=>{\n    this.setState({byCoutries:country})\n  }\n  \n  \n  render(){\n    return <div style={{width:'100%',textAlign:'center'}}>\n      \n    <SearchBar options={this.state.covid19Data} selectCountry={this.selectCountry}/>\n\n    <ContentDiv  globalReport={this.state.covid19Data} byCountryData={this.state.byCoutries}/>\n    \n    </div>\n    \n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}